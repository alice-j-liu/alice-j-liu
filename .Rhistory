delta[k, l] <- 0
}
if (j == 6) {
delta[k, l] <- split[1]^2/(split[1] + split[3])^2
}
if (j == 7) {
delta[k, l] <- 1
}
}
l <- l + 1
}
k <- k + 1
}
node <- tree1$where
split <- tree1$splits[c(1, 6, 10), 3]
delta <- matrix(rep(0, n*n), nrow = n)
k <- 1; l <- 1
for (i in node) {
k <- ifelse(k > 1000, 1, k)
for (j in node) {
if (i == 4) {
if (j == 4) {
delta[k, l] <- 1
}
if (j == 5) {
delta[k, l] <- split[1]^2/(split[1] + split[2])^2
}
if (j == 6 | j == 7) {
delta[k, l] <- 0
}
}
if (i == 5) {
if (j == 4) {
delta[k, l] <- split[1]^2/(split[1] + split[2])^2
}
if (j == 5) {
delta[k, l] <- 1
}
if (j == 6 | j == 7) {
delta[k, l] <- 0
}
}
if (i == 6) {
if (j == 4 | j == 5) {
delta[k, l] <- 0
}
if (j == 6) {
delta[k, l] <- 1
}
if (j == 7) {
delta[k, l] <- split[1]^2/(split[1] + split[3])^2
}
}
else {
if (j == 4 | j == 5) {
delta[k, l] <- 0
}
if (j == 6) {
delta[k, l] <- split[1]^2/(split[1] + split[3])^2
}
if (j == 7) {
delta[k, l] <- 1
}
}
l <- l + 1
}
k <- k + 1
}
node
split
delta
dim(delta)
k
node <- tree1$where
split <- tree1$splits[c(1, 6, 10), 3]
delta <- matrix(rep(0, n*n), nrow = n)
k <- 1
for (i in node) {
l <- 1
for (j in node) {
if (i == 4) {
if (j == 4) {
delta[k, l] <- 1
}
if (j == 5) {
delta[k, l] <- split[1]^2/(split[1] + split[2])^2
}
if (j == 6 | j == 7) {
delta[k, l] <- 0
}
}
if (i == 5) {
if (j == 4) {
delta[k, l] <- split[1]^2/(split[1] + split[2])^2
}
if (j == 5) {
delta[k, l] <- 1
}
if (j == 6 | j == 7) {
delta[k, l] <- 0
}
}
if (i == 6) {
if (j == 4 | j == 5) {
delta[k, l] <- 0
}
if (j == 6) {
delta[k, l] <- 1
}
if (j == 7) {
delta[k, l] <- split[1]^2/(split[1] + split[3])^2
}
}
else {
if (j == 4 | j == 5) {
delta[k, l] <- 0
}
if (j == 6) {
delta[k, l] <- split[1]^2/(split[1] + split[3])^2
}
if (j == 7) {
delta[k, l] <- 1
}
}
l <- l + 1
}
k <- k + 1
}
delta
delta[1:10, 1:10]
delta[1, ]
node <- tree1$where
split <- tree1$splits[c(1, 6, 10), 3]
delta <- matrix(rep(0, n*n), nrow = n)
k <- 1
for (i in node) {
l <- 1
for (j in node) {
if (i == 4) {
if (j == 4) {
delta[k, l] <- 1
}
if (j == 5) {
delta[k, l] <- sqrt(split[1]^2/(split[1] + split[2])^2)
}
if (j == 6 | j == 7) {
delta[k, l] <- 0
}
}
if (i == 5) {
if (j == 4) {
delta[k, l] <- sqrt(split[1]^2/(split[1] + split[2])^2)
}
if (j == 5) {
delta[k, l] <- 1
}
if (j == 6 | j == 7) {
delta[k, l] <- 0
}
}
if (i == 6) {
if (j == 4 | j == 5) {
delta[k, l] <- 0
}
if (j == 6) {
delta[k, l] <- 1
}
if (j == 7) {
delta[k, l] <- sqrt(split[1]^2/(split[1] + split[3])^2)
}
}
else {
if (j == 4 | j == 5) {
delta[k, l] <- 0
}
if (j == 6) {
delta[k, l] <- split[1]^2/(split[1] + split[3])^2
}
if (j == 7) {
delta[k, l] <- 1
}
}
l <- l + 1
}
k <- k + 1
}
delta
delta[1, ]
delta[1, ] %in% delta[1, ]
delta[1, ] %*% delta[1, ]
for (i in 1:n) {
for (j in 1:n) {
hold <- (delta[i, ] %*% delta[j, ])/(norm(delta[i, ], type = "2") * norm(delta[j, ], type = "2"))
}
print(hold)
}
delta2 <- delta #rep(0, n)
delta2 <- delta #rep(0, n)
for (i in 1:n) {
for (j in 1:n) {
delta2[i, j] <- (delta[i, ] %*% delta[j, ])/(norm(delta[i, ], type = "2") * norm(delta[j, ], type = "2"))
}
}
delta2[1, ]
delta[1, ]
rowMeans(delta)
delta[2, ]
?rpart
?sample
dim(data)
bootstrap <- sample(1:dim(data)[1], dim(data)[1], replace = TRUE)
bootstrap
data[bootstrap, ]
dim(data[bootstrap, ])
str(tree1)
predict(tree1)
head(predict(tree1))
predict(tree1, type = "class")
numtrees <- 500
predictions <- matrix(rep(0, numtrees*n), nrow = n, ncol = numtrees)
delta_list <- as.list(rep(0, numtrees))
for (a in 1:numtrees) {
bootstrap <- sample(1:dim(data)[1], dim(data)[1], replace = TRUE)
tree <- rpart(z1 ~ x1 + x2 + y1, method = "class", data = data[bootstrap, ], maxdepth = 4)
predictions[, a] <- predict(tree, type = "class")
node <- tree$where
split <- tree$splits[c(1, 6, 10), 3]
delta <- matrix(rep(0, n*n), nrow = n)
k <- 1
for (i in node) {
l <- 1
for (j in node) {
if (i == 4) {
if (j == 4) {
delta[k, l] <- 1
}
if (j == 5) {
delta[k, l] <- sqrt(split[1]^2/(split[1] + split[2])^2)
}
if (j == 6 | j == 7) {
delta[k, l] <- 0
}
}
if (i == 5) {
if (j == 4) {
delta[k, l] <- sqrt(split[1]^2/(split[1] + split[2])^2)
}
if (j == 5) {
delta[k, l] <- 1
}
if (j == 6 | j == 7) {
delta[k, l] <- 0
}
}
if (i == 6) {
if (j == 4 | j == 5) {
delta[k, l] <- 0
}
if (j == 6) {
delta[k, l] <- 1
}
if (j == 7) {
delta[k, l] <- sqrt(split[1]^2/(split[1] + split[3])^2)
}
}
else {
if (j == 4 | j == 5) {
delta[k, l] <- 0
}
if (j == 6) {
delta[k, l] <- split[1]^2/(split[1] + split[3])^2
}
if (j == 7) {
delta[k, l] <- 1
}
}
l <- l + 1
}
k <- k + 1
}
delta_list[[a]] <- delta
}
predictions
mod1$votes[, i]
mod1$votes
str(delta_list)
str(simplify2array(delta_list))
delta_avg <- apply(simplify2array(delta_list), 1:2, mean)
str(delta_avg)
delta_avg[1:10, 1:10]
delta_array <- simplify2array(delta_list)
str(delta_array)
delta_array[1, 1, ]
delta_array[2, 2, ]
delta_array[3, 3, ]
delta_array[3, 1, ]
prop.table(predictions)
dim(prop.table(predictions))
?prop.table
prop.table(predictions, margin = 2)
prop.table(predictions, margin = ``)
prop.table(predictions, margin = 1)
?sweep
predictions[, 1]
sweep(predictions, 2, table)
table(predictions[, 1])
table(predictions[, 2])
table(predictions[1, ])
apply(predictions[1:10, ], 1, function(x) table(x)/sum(table(x)))
dim(predictions)
?apply
apply(predictions[1:10, ], 1, function(x) return(x))
apply(predictions[1:10, ], 1, table)
apply(predictions[1:2, ], 1, table)
apply(predictions[1:2, ], 1, function(x) table(x)/sum(table(x)))
apply(predictions[1:10, ], 1, function(x) table(x)/sum(table(x)))
apply(predictions, 1, function(x) table(x)/sum(table(x)))
predictions2 <- apply(predictions, 1, function(x) table(x)/sum(table(x)))
predictions2 <- t(apply(predictions, 1, function(x) table(x)/sum(table(x))))
dim(predictions2)
dim(delta_avg)
predictions2 <- t(apply(predictions, 1, function(x) table(x)/sum(table(x))))
hold <- matrix(0L, nrow = n, ncol = n)
hold_list <- as.list(rep(0, dim(predictions2)[2]))
for (i in 1:dim(predictions2)[2]) {
for (j in 1:n) {
hold[j, ] <- (delta_avg[j, ] * predictions2[, i])
}
hold_list[[i]] <- rowSums(hold)
}
delta_prob <- data.frame(matrix(unlist(hold_list), nrow = 1000))
colnames(delta_prob) <- c("1", "2", "3", "4")
delta_prob2 <- data.frame(cbind(c(delta_prob[, 1], delta_prob[, 2], delta_prob[, 3], delta_prob[, 4]), rep(1:4, each = n)))
colnames(delta_prob2) <- c("Probability", "Cluster")
ggplot(delta_prob2, aes(x = Probability)) +
geom_histogram(color = "black", fill = "grey", alpha = 0.5, bins = 50) +
geom_vline(xintercept = 0.1, color = "darkred", linetype = 2, size = 2) +
geom_vline(xintercept = 0.3, color = "darkred", linetype = 2, size = 2) +
geom_vline(xintercept = 0.9, color = "darkred", linetype = 2, size = 2) +
labs(title = "Delta Kernel Probability Estimates", y = "Count") +
theme(text = element_text(size = 15))
delta_avg[1, ]
denom <- rowSums(predictions2)
hold <- matrix(0L, nrow = n, ncol = n)
denom <- rowSums(predictions2)
hold_list <- as.list(rep(0, dim(predictions2)[2]))
for (i in 1:dim(predictions2)[2]) {
for (j in 1:n) {
hold[j, ] <- (delta_avg[j, ] * predictions2[, i])/denom[j]
}
hold_list[[i]] <- rowSums(hold)
}
delta_prob <- data.frame(matrix(unlist(hold_list), nrow = 1000))
colnames(delta_prob) <- c("1", "2", "3", "4")
delta_prob2 <- data.frame(cbind(c(delta_prob[, 1], delta_prob[, 2], delta_prob[, 3], delta_prob[, 4]), rep(1:4, each = n)))
colnames(delta_prob2) <- c("Probability", "Cluster")
ggplot(delta_prob2, aes(x = Probability)) +
geom_histogram(color = "black", fill = "grey", alpha = 0.5, bins = 50) +
geom_vline(xintercept = 0.1, color = "darkred", linetype = 2, size = 2) +
geom_vline(xintercept = 0.3, color = "darkred", linetype = 2, size = 2) +
geom_vline(xintercept = 0.9, color = "darkred", linetype = 2, size = 2) +
labs(title = "Delta Kernel Probability Estimates", y = "Count") +
theme(text = element_text(size = 15))
denom <- rowSums(delta_avg)
hold_list <- as.list(rep(0, dim(predictions2)[2]))
for (i in 1:dim(predictions2)[2]) {
for (j in 1:n) {
hold[j, ] <- (delta_avg[j, ] * predictions2[, i])/denom[j]
}
hold_list[[i]] <- rowSums(hold)
}
delta_prob <- data.frame(matrix(unlist(hold_list), nrow = 1000))
colnames(delta_prob) <- c("1", "2", "3", "4")
delta_prob2 <- data.frame(cbind(c(delta_prob[, 1], delta_prob[, 2], delta_prob[, 3], delta_prob[, 4]), rep(1:4, each = n)))
colnames(delta_prob2) <- c("Probability", "Cluster")
ggplot(delta_prob2, aes(x = Probability)) +
geom_histogram(color = "black", fill = "grey", alpha = 0.5, bins = 50) +
geom_vline(xintercept = 0.1, color = "darkred", linetype = 2, size = 2) +
geom_vline(xintercept = 0.3, color = "darkred", linetype = 2, size = 2) +
geom_vline(xintercept = 0.9, color = "darkred", linetype = 2, size = 2) +
labs(title = "Delta Kernel Probability Estimates", y = "Count") +
theme(text = element_text(size = 15))
numtrees <- 500
predictions <- matrix(rep(0, numtrees*n), nrow = n, ncol = numtrees)
delta_list <- as.list(rep(0, numtrees))
start <- Sys.time()
for (a in 1:numtrees) {
bootstrap <- sample(1:dim(data)[1], dim(data)[1], replace = TRUE)
tree <- rpart(z1 ~ x1 + x2 + y1, method = "class", data = data[bootstrap, ], maxdepth = 4)
predictions[, a] <- predict(tree, type = "class")
node <- tree$where
split <- tree$splits[c(1, 6, 10), 3]
delta <- matrix(rep(0, n*n), nrow = n)
k <- 1
for (i in node) {
l <- 1
for (j in node) {
if (i == 4) {
if (j == 4) {
delta[k, l] <- 1
}
if (j == 5) {
delta[k, l] <- sqrt(split[1]^2/(split[1] + split[2])^2)
}
if (j == 6 | j == 7) {
delta[k, l] <- 0
}
}
if (i == 5) {
if (j == 4) {
delta[k, l] <- sqrt(split[1]^2/(split[1] + split[2])^2)
}
if (j == 5) {
delta[k, l] <- 1
}
if (j == 6 | j == 7) {
delta[k, l] <- 0
}
}
if (i == 6) {
if (j == 4 | j == 5) {
delta[k, l] <- 0
}
if (j == 6) {
delta[k, l] <- 1
}
if (j == 7) {
delta[k, l] <- sqrt(split[1]^2/(split[1] + split[3])^2)
}
}
else {
if (j == 4 | j == 5) {
delta[k, l] <- 0
}
if (j == 6) {
delta[k, l] <- sqrt(split[1]^2/(split[1] + split[3])^2)
}
if (j == 7) {
delta[k, l] <- 1
}
}
l <- l + 1
}
k <- k + 1
}
delta_list[[a]] <- delta
}
end <- Sys.time()
end - start
delta_array <- simplify2array(delta_list)
delta_avg <- apply(delta_array, 1:2, mean)
predictions2 <- t(apply(predictions, 1, function(x) table(x)/sum(table(x))))
hold <- matrix(0L, nrow = n, ncol = n)
denom <- rowSums(delta_avg)
hold_list <- as.list(rep(0, dim(predictions2)[2]))
for (i in 1:dim(predictions2)[2]) {
for (j in 1:n) {
hold[j, ] <- (delta_avg[j, ] * predictions2[, i])/denom[j]
}
hold_list[[i]] <- rowSums(hold)
}
delta_prob <- data.frame(matrix(unlist(hold_list), nrow = 1000))
colnames(delta_prob) <- c("1", "2", "3", "4")
delta_prob2 <- data.frame(cbind(c(delta_prob[, 1], delta_prob[, 2], delta_prob[, 3], delta_prob[, 4]), rep(1:4, each = n)))
colnames(delta_prob2) <- c("Probability", "Cluster")
ggplot(delta_prob2, aes(x = Probability)) +
geom_histogram(color = "black", fill = "grey", alpha = 0.5, bins = 50) +
geom_vline(xintercept = 0.1, color = "darkred", linetype = 2, size = 2) +
geom_vline(xintercept = 0.3, color = "darkred", linetype = 2, size = 2) +
geom_vline(xintercept = 0.9, color = "darkred", linetype = 2, size = 2) +
labs(title = "Delta Kernel Probability Estimates", y = "Count") +
theme(text = element_text(size = 15))
table(delta_list[[1]])
table(delta_list[[1]][1, ])
table(delta_list[[1]][2, ])
library(randomForest)
install.packages("grf")
library(grf) # install.packages("grf")
install.packages("updateR")
exp(-0.00672)
updateR()
install.packages(c("backports", "BH", "callr", "caret", "cli", "clipr", "colorspace", "covr", "crayon", "crosstalk", "curl", "data.table", "desc", "devtools", "DiceKriging", "digest", "doParallel", "dplyr", "DT", "ellipsis", "fansi", "fastmap", "fitdistrplus", "foreach", "fs", "generics", "GGally", "ggplot2", "gh", "git2r", "glue", "gower", "grf", "hexbin", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "ipred", "iterators", "jsonlite", "labeling", "later", "lava", "lifecycle", "lmtest", "lsei", "lubridate", "magrittr", "memoise", "mime", "ModelMetrics", "npsurv", "openssl", "pillar", "pkgbuild", "pkgload", "plotly", "plotrix", "plyr", "prettyunits", "processx", "promises", "ps", "purrr", "R6", "rcmdcheck", "Rcpp", "RcppEigen", "recipes", "remotes", "reshape2", "rex", "rlang", "roxygen2", "rprojroot", "rstudioapi", "rversions", "sandwich", "scales", "sessioninfo", "shiny", "SQUAREM", "stringi", "sys", "testthat", "tibble", "tidyr", "tidyselect", "tree", "usethis", "utf8", "vctrs", "viridis", "viridisLite", "withr", "xml2", "yaml", "zoo"))
install.packages('installr')
library(installr)
updateR()
install.packages("bookdown")
install.packages("blogdown")
install.packages("pkgdown")
library(installr)
install.packages('installr')
library(installr)
updater()
install.packages("bookdown")
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
Sys.which("make")
install.packages('installr')
install.packages("bookdown")
render_book(input = ".", output_format = NULL, ..., clean = TRUE, envir = parent.frame(), clean_envir = !interactive(), output_dir = NULL, new_session = NA, preview = FALSE, config_file = "_bookdown.yml")
library(bookdown)
render_book(input = ".", output_format = NULL, ..., clean = TRUE, envir = parent.frame(), clean_envir = !interactive(), output_dir = NULL, new_session = NA, preview = FALSE, config_file = "_bookdown.yml")
render_book(input = ".", output_format = NULL, clean = TRUE, envir = parent.frame(), clean_envir = !interactive(), output_dir = NULL, new_session = NA, preview = FALSE, config_file = "_bookdown.yml")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
setwd("~/alice-j-liu")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
install.packages("prettydoc")
library(prettydoc)
install.packages("rmdformats")
library(rmdformats)
install.packages("pkgdown")
library(pkgdown)
install.packages("bslib")
install.packages("bslib")
